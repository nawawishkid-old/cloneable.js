{"version":3,"sources":["EventEmitter.js","StateController.js","OptionController.js","Cloneable.js","build.js"],"names":["EventEmitter","events","eventName","eventExists","callback","push","args","context","forEach","call","StateController","initialState","eventEmitter","state","on","newState","emit","OptionController","defaultData","_data","key","fallback","data","_dotNotationResolver","value","dotNotationString","split","reduce","d","Cloneable","container","options","Error","type","constructor","name","slice","TypeError","Object","receivedType","_iniOptionController","_initStateController","middlewares","optionController","get","keys","cloneButton","_getCloneButton","_handleCustomRemoveButton","_initControllersElement","_initTrayElement","_initContainerElement","stateController","disabled","_getState","clonedAmount","maxCloneable","dataset","max","append","parseInt","Infinity","isAppend","removeButton","cloneableAmount","clonedElements","controllers","_createElement","className","_getConstant","appendChild","tray","style","marginBottom","padding","target","firstElementChild","isCloneable","clonedElemWrapper","_createClonedElementWrapper","cloned","cloneNode","_getRemoveButton","insertMethod","alteredCloned","_applyMiddlewares","setState","id","querySelector","removeChild","querySelectorAll","customBtn","_findCustomButton","btn","textContent","addEventListener","clone","removeButtonTemplate","e","removeClonedElement","parentElement","clonedId","cln","mdlw","buttonType","tagName","attributes","elem","document","createElement","constants","freeze","CLONE_BUTTON_CLASSNAME","REMOVE_BUTTON_CLASSNAME","TRAY_ELEMENT_CLASSNAME","CLONED_ELEMENT_CLASSNAME","CONTROLLERS_ELEMENT_CLASSNAME","window"],"mappings":";AA8BeA,aAAAA,SAAAA,EAAAA,EAAAA,GAAAA,KAAAA,aAAAA,GAAAA,MAAAA,IAAAA,UAAAA,qCAAAA,SAAAA,EAAAA,EAAAA,GAAAA,IAAAA,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,IAAAA,CAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,WAAAA,EAAAA,aAAAA,EAAAA,EAAAA,cAAAA,EAAAA,UAAAA,IAAAA,EAAAA,UAAAA,GAAAA,OAAAA,eAAAA,EAAAA,EAAAA,IAAAA,IAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,EAAAA,UAAAA,GAAAA,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EA9BTA,IAAAA,EA8BSA,WA7BC,SAAA,IAAA,EAAA,KAAA,GACPC,KAAAA,OAAS,GA4BHD,OAAAA,EAAAA,EAAAA,CAAAA,CAAAA,IAAAA,KAzBVE,MAAAA,SAAAA,GAAwB,IAAA,EACpB,KAAKC,YAAYD,KACfD,KAAAA,OAAOC,GAAa,IAFZE,IAAAA,IAAAA,EAAAA,UAAAA,OAAAA,EAAU,IAAA,MAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,IAAVA,EAAU,EAAA,GAAA,UAAA,GAOlB,OAFFH,EAAAA,KAAAA,OAAOC,IAAWG,KAAQD,MAAAA,EAAAA,GAExB,OAkBIJ,CAAAA,IAAAA,OAfRE,MAAAA,SAAAA,GAA8BI,IAAnBC,IAAAA,EAAU,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,KAASD,EAAAA,UAAAA,OAAAA,EAAM,IAAA,MAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,IAANA,EAAM,EAAA,GAAA,UAAA,GAOhC,OANH,KAAKH,YAAYD,IACdD,KAAAA,OAAOC,GAAWM,QAAQ,SAAAJ,GAC7BA,OAAAA,EAASK,KAATL,MAAAA,EAAcG,CAAAA,GAAYD,OAAAA,MAIvB,OAQIN,CAAAA,IAAAA,cALDE,MAAAA,SAAAA,GACH,YAAkC,IAA3B,KAAKD,OAAOC,OAIfF,EAAAA,GAAAA,EAAAA,EAAAA,QAAAA,QAAAA;;ACAAU,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EA9Bf,IAAA,EAAA,EAAA,QAAA,mBA8BeA,SAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,WAAAA,EAAAA,CAAAA,QAAAA,GAAAA,SAAAA,EAAAA,GAAAA,IAAAA,IAAAA,EAAAA,EAAAA,EAAAA,UAAAA,OAAAA,IAAAA,CAAAA,IAAAA,EAAAA,MAAAA,UAAAA,GAAAA,UAAAA,GAAAA,GAAAA,EAAAA,OAAAA,KAAAA,GAAAA,mBAAAA,OAAAA,wBAAAA,EAAAA,EAAAA,OAAAA,OAAAA,sBAAAA,GAAAA,OAAAA,SAAAA,GAAAA,OAAAA,OAAAA,yBAAAA,EAAAA,GAAAA,eAAAA,EAAAA,QAAAA,SAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,MAAAA,OAAAA,EAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GAAAA,OAAAA,KAAAA,EAAAA,OAAAA,eAAAA,EAAAA,EAAAA,CAAAA,MAAAA,EAAAA,YAAAA,EAAAA,cAAAA,EAAAA,UAAAA,IAAAA,EAAAA,GAAAA,EAAAA,EAAAA,SAAAA,EAAAA,EAAAA,GAAAA,KAAAA,aAAAA,GAAAA,MAAAA,IAAAA,UAAAA,qCAAAA,SAAAA,EAAAA,EAAAA,GAAAA,IAAAA,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,IAAAA,CAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,WAAAA,EAAAA,aAAAA,EAAAA,EAAAA,cAAAA,EAAAA,UAAAA,IAAAA,EAAAA,UAAAA,GAAAA,OAAAA,eAAAA,EAAAA,EAAAA,IAAAA,IAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,EAAAA,UAAAA,GAAAA,GAAAA,EAAAA,EAAAA,GAAAA,EA5BTA,IAAAA,EA4BSA,WA3BkB,SAAA,IAAnBC,IAAAA,EAAe,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GAAI,EAAA,KAAA,GACxBC,KAAAA,aAAe,IAAIZ,EAAJ,QACfW,KAAAA,aAAeA,EACfE,KAAAA,MAAQF,EAwBFD,OAAAA,EAAAA,EAAAA,CAAAA,CAAAA,IAAAA,KArBD,MAAA,WAAA,IAAA,EAGH,OAFFE,EAAAA,KAAAA,cAAaE,GAAlB,MAAA,EAAA,WAEO,OAkBIJ,CAAAA,IAAAA,WAfJK,MAAAA,SAAAA,GAKA,OAJFH,KAAAA,aAAaI,KAAK,qBAClBH,KAAAA,MAAa,EAAA,GAAA,KAAKA,MAAUE,GAC5BH,KAAAA,aAAaI,KAAK,oBAEhB,OAUIN,CAAAA,IAAAA,QAPL,MAAA,WAGC,OAFFG,KAAAA,MAAQ,KAAKF,aAEX,SAIID,EAAAA,GAAAA,EAAAA,EAAAA,QAAAA,QAAAA;;ACRAO,aAAAA,SAAAA,EAAAA,EAAAA,GAAAA,KAAAA,aAAAA,GAAAA,MAAAA,IAAAA,UAAAA,qCAAAA,SAAAA,EAAAA,EAAAA,GAAAA,IAAAA,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,IAAAA,CAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,WAAAA,EAAAA,aAAAA,EAAAA,EAAAA,cAAAA,EAAAA,UAAAA,IAAAA,EAAAA,UAAAA,GAAAA,OAAAA,eAAAA,EAAAA,EAAAA,IAAAA,IAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,EAAAA,UAAAA,GAAAA,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAtBTA,IAAAA,EAsBSA,WArBiB,SAAA,IAAlBC,IAAAA,EAAc,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GAAI,EAAA,KAAA,GACvBC,KAAAA,MAAQD,EAoBFD,OAAAA,EAAAA,EAAAA,CAAAA,CAAAA,IAAAA,MAjBTG,MAAAA,SAAAA,EAAKC,GACDC,IAAAA,EAAO,KAAKC,qBAAqBH,GAEhC,YAAgB,IAATE,EAAuBD,EAAWC,IAcrCL,CAAAA,IAAAA,MAXTG,MAAAA,SAAAA,EAAKI,GAGA,OAFFL,KAAAA,MAAMC,GAAOI,EAEX,OAQIP,CAAAA,IAAAA,uBALQQ,MAAAA,SAAAA,GACZA,OAAAA,EAAkBC,MAAM,KAAKC,OAAO,SAACC,EAAGR,GAAQQ,OAAAA,EAAER,IAAM,KAAKD,WAIzDF,EAAAA,GAAAA,EAAAA,EAAAA,QAAAA,QAAAA;;ACiYAY,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAvZf,IAAA,EAAA,EAAA,QAAA,mBACA,EAAA,EAAA,QAAA,sBACA,EAAA,EAAA,QAAA,uBAqZeA,SAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,WAAAA,EAAAA,CAAAA,QAAAA,GAAAA,SAAAA,EAAAA,GAAAA,IAAAA,IAAAA,EAAAA,EAAAA,EAAAA,UAAAA,OAAAA,IAAAA,CAAAA,IAAAA,EAAAA,MAAAA,UAAAA,GAAAA,UAAAA,GAAAA,GAAAA,EAAAA,OAAAA,KAAAA,GAAAA,mBAAAA,OAAAA,wBAAAA,EAAAA,EAAAA,OAAAA,OAAAA,sBAAAA,GAAAA,OAAAA,SAAAA,GAAAA,OAAAA,OAAAA,yBAAAA,EAAAA,GAAAA,eAAAA,EAAAA,QAAAA,SAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,MAAAA,OAAAA,EAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GAAAA,OAAAA,KAAAA,EAAAA,OAAAA,eAAAA,EAAAA,EAAAA,CAAAA,MAAAA,EAAAA,YAAAA,EAAAA,cAAAA,EAAAA,UAAAA,IAAAA,EAAAA,GAAAA,EAAAA,EAAAA,SAAAA,EAAAA,GAAAA,OAAAA,EAAAA,IAAAA,EAAAA,IAAAA,IAAAA,SAAAA,IAAAA,MAAAA,IAAAA,UAAAA,mDAAAA,SAAAA,EAAAA,GAAAA,GAAAA,OAAAA,YAAAA,OAAAA,IAAAA,uBAAAA,OAAAA,UAAAA,SAAAA,KAAAA,GAAAA,OAAAA,MAAAA,KAAAA,GAAAA,SAAAA,EAAAA,GAAAA,GAAAA,MAAAA,QAAAA,GAAAA,CAAAA,IAAAA,IAAAA,EAAAA,EAAAA,EAAAA,IAAAA,MAAAA,EAAAA,QAAAA,EAAAA,EAAAA,OAAAA,IAAAA,EAAAA,GAAAA,EAAAA,GAAAA,OAAAA,GAAAA,SAAAA,EAAAA,GAAAA,OAAAA,EAAAA,mBAAAA,QAAAA,iBAAAA,OAAAA,SAAAA,SAAAA,GAAAA,cAAAA,GAAAA,SAAAA,GAAAA,OAAAA,GAAAA,mBAAAA,QAAAA,EAAAA,cAAAA,QAAAA,IAAAA,OAAAA,UAAAA,gBAAAA,IAAAA,GAAAA,SAAAA,EAAAA,EAAAA,GAAAA,KAAAA,aAAAA,GAAAA,MAAAA,IAAAA,UAAAA,qCAAAA,SAAAA,EAAAA,EAAAA,GAAAA,IAAAA,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,IAAAA,CAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,WAAAA,EAAAA,aAAAA,EAAAA,EAAAA,cAAAA,EAAAA,UAAAA,IAAAA,EAAAA,UAAAA,GAAAA,OAAAA,eAAAA,EAAAA,EAAAA,IAAAA,IAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,EAAAA,UAAAA,GAAAA,GAAAA,EAAAA,EAAAA,GAAAA,EA9XTA,IAAAA,EA8XSA,WAzXDC,SAAAA,EAAAA,GAAyB,IAAA,EAAA,KAAdC,EAAU,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GAC3B,GAD+B,EAAA,KAAA,QACV,IAAdD,EACH,MAAA,IAAIE,MAAM,uCAGZC,IAAAA,EAAOH,EAAUI,YAAYC,KAAKC,MAAM,EAAG,GAE7CH,GAAS,QAATA,GAA2B,QAATA,EACd,MAAA,IAAII,UACR,iGAIAN,GAAY,OAAZA,GAAoBA,EAAQG,cAAgBI,OAAQ,CAChDC,IAAAA,EAA2B,OAAZR,EAAmB,OAAgBA,EAAAA,GAElD,MAAA,IAAIM,UACR,qCAAuCE,EAAe,WAIrDT,KAAAA,UAAYA,EACZU,KAAAA,qBAAqBT,GACrBU,KAAAA,uBACA7B,KAAAA,aAAe,IAAIZ,EAAJ,QACf0C,KAAAA,YAAc,KAAKC,iBAAiBC,IAAI,eAGvC3C,IAAAA,EAAS,KAAK0C,iBAAiBC,IAAI,UAEzCN,OAAOO,KAAK5C,GAAQO,QAAQ,SAAAN,GAC1B,OAAA,EAAKY,GAAL,MAAA,EAAQZ,CAAAA,GAAcD,OAAAA,EAAAA,EAAOC,QA0VpB2B,OAAAA,EAAAA,EAAAA,CAAAA,CAAAA,IAAAA,aA/UW,MAAA,WAAA,IAAA,EAGf,OAFFa,EAAAA,KAAAA,aAAYrC,KAAjB,MAAA,EAAA,WAEO,OA4UIwB,CAAAA,IAAAA,KArUD,MAAA,WAAA,IAAA,EAGH,OAFFjB,EAAAA,KAAAA,cAAaE,GAAlB,MAAA,EAAA,WAEO,OAkUIe,CAAAA,IAAAA,OA5TN,MAAA,WAAA,IAAA,EAAA,KAoBE,OAnBFiB,KAAAA,YAAc,KAAKC,kBACnBC,KAAAA,4BACAC,KAAAA,0BACAC,KAAAA,mBACAC,KAAAA,wBAGAC,KAAAA,gBAAgBtC,GAAG,mBAAoB,WAC1C,EAAKF,aAAaI,KAAK,mBAAoB,GAE3C,EAAK8B,YAAYO,SACf,EAAKC,YAAYC,eAAiB,EAAKD,YAAYE,eAElDJ,KAAAA,gBAAgBtC,GAAG,oBAAqB,WAC3C,EAAKF,aAAaI,KAAK,oBAAqB,KAGzCJ,KAAAA,aAAaI,KAAK,OAAQ,MAExB,OAwSIa,CAAAA,IAAAA,cAhSC,MAAA,WACL,OAAA,KAAKyB,YAAYC,aAAe,KAAKD,YAAYE,eA+R7C3B,CAAAA,IAAAA,uBA5RQE,MAAAA,SAAAA,GACK,IAAA,EAAA,KAAKD,UAAU2B,QAA/BC,EAAAA,EAAAA,IAAKC,EAAAA,EAAAA,OAERhB,KAAAA,iBAAmB,IAAI1B,EAAJ,QAAA,EAAA,CACtBuC,aAAcI,SAASF,IAAQG,EAAAA,EAC/BC,SAAqB,UAAXH,EACVb,YAAa,KACbiB,aAAc,KACdrB,YAAa,GACbzC,OAAQ,IACL8B,MAkRMF,CAAAA,IAAAA,uBA9QU,MAAA,WACf2B,IAAAA,EAAe,KAAKb,iBAAiBC,IAAI,gBAE1CQ,KAAAA,gBAAkB,IAAI1C,EAAJ,QAAoB,CACzC8C,aAAAA,EACAQ,gBAAiBR,EACjBD,aAAc,EACdU,eAAgB,GAChBH,SAAU,KAAKnB,iBAAiBC,IAAI,gBAsQ3Bf,CAAAA,IAAAA,0BA/Pa,MAAA,WACnBqC,KAAAA,YAAc,KAAKC,eAAe,MAAO,CAC5CC,UAAW,KAAKC,aAAa,mCAE1BH,KAAAA,YAAYI,YAAY,KAAKxB,eA2PvBjB,CAAAA,IAAAA,mBArPM,MAAA,WACX0C,IAAAA,EAAO,KAAKJ,eAAe,MAAO,CACtCC,UAAW,KAAKC,aAAa,4BAG/BE,EAAKC,MAAMC,aAAe,MAErBF,KAAAA,KAAOA,IA8OD1C,CAAAA,IAAAA,wBAxOW,MAAA,WACjBC,KAAAA,UAAU0C,MAAME,QAAU,MAC1BC,KAAAA,OAAS,KAAK7C,UAAU8C,kBAGxBL,KAAAA,KAAKD,YAAY,KAAKK,QACtB7C,KAAAA,UAAUwC,YAAY,KAAKC,MAC3BzC,KAAAA,UAAUwC,YAAY,KAAKJ,eAiOrBrC,CAAAA,IAAAA,QA3NL,MAAA,WACF,GAAC,KAAKgD,cAAN,CAMCjE,KAAAA,aAAaI,KAAK,cAAe,MAEhC8D,IAAAA,EAAoB,KAAKC,8BACzBC,EAAS,KAAKL,OAAOM,WAAU,GAC/BlB,EAAe,KAAKmB,mBACpBC,EAAe,KAAK7B,YAAYQ,SAClC,cACA,eAIJgB,EAAkBR,YAAYU,GAC9BF,EAAkBR,YAAYP,GAGzBQ,KAAAA,KAAKY,GAAcL,EAAmB,KAAKP,KAAKK,mBAE/CQ,IAAAA,EAAgB,KAAKC,kBAAkBL,GACa,EAAA,KAAK1B,YAAvDC,EAAAA,EAAAA,aAAcS,EAAAA,EAAAA,gBAAiBC,EAAAA,EAAAA,eAUhC,OARFb,KAAAA,gBAAgBkC,SAAS,CAC5B/B,aAAcA,EAAe,EAC7BS,gBAAiBA,EAAkB,EACnCC,eAAoBA,GAAAA,OAAAA,EAAAA,GAAgBmB,CAAAA,MAGjCxE,KAAAA,aAAaI,KAAK,aAAc,MAE9B,KAjCAJ,KAAAA,aAAaI,KAAK,cAAe,QAyN7Ba,CAAAA,IAAAA,sBAlLO0D,MAAAA,SAAAA,GACZZ,IAAAA,EAAS,KAAKJ,KAAKiB,cAAkCD,oBAAAA,OAAAA,EAA3D,OAEKhB,KAAAA,KAAKkB,YAAYd,GAEjBvB,KAAAA,gBAAgBkC,SAAS,CAC5B/B,aAAc,KAAKD,YAAYC,aAAe,EAC9CS,gBAAiB,KAAKV,YAAYU,gBAAkB,EACpDC,eAAoB,EAAA,KAAKM,KAAKmB,iBAAiB,yBA0KtC7D,CAAAA,IAAAA,kBA5JK,MAAA,WAAA,IAAA,EAAA,KACV8D,EACJ,KAAKhD,iBAAiBC,IAAI,gBAC1B,KAAKgD,kBAAkB,SACnBC,EAAMF,GAER,KAAKxB,eAAe,SAAU,CAC5BC,UAAW,KAAKC,aAAa,0BAC7ByB,YAAa,UAQZD,OALPA,EAAIE,iBAAiB,QAAS,WAC5B,EAAKnF,aAAaI,KAAK,mBAAoB,GAC3C,EAAKgF,UAGAH,IA4IIhE,CAAAA,IAAAA,mBAnIM,MAAA,WAAA,IAAA,EAAA,KACXgE,EAAM,KAAKI,qBACb,KAAKA,qBAAqBhB,WAAU,GACpC,KAAKd,eAAe,SAAU,CAC5BC,UAAW,KAAKC,aAAa,2BAC7ByB,YAAa,WAYZD,OALPA,EAAIE,iBAAiB,QAAS,SAAAG,GAC5B,EAAKtF,aAAaI,KAAK,oBAAqB,GAC5C,EAAKmF,oBAAoBD,EAAEvB,OAAOyB,cAAc3C,QAAQ4C,YAGnDR,IAkHIhE,CAAAA,IAAAA,oBAzGKmD,MAAAA,SAAAA,GAAQ,IAAA,EAAA,KAChB9C,EAAgB8C,EAAhB9C,YAED,OAAA,KAAKQ,YAAYf,OAAO,SAAC2E,EAAKC,GAC7BnB,IAAAA,EAAgBmB,EAAK9F,KACzB,EACA6F,EACA,EAAKhD,YAAYC,aAAe,GAIhC,QAAyB,IAAlB6B,GACPA,EAAclD,cAAgBA,EAExB,MAAA,IAAIG,UAAU,6CAGf+C,OAAAA,GACNJ,KAuFQnD,CAAAA,IAAAA,4BAjFe,MAAA,WACpB8D,IAAAA,EACJ,KAAKhD,iBAAiBC,IAAI,iBAC1B,KAAKgD,kBAAkB,UAEpBD,IAIAM,KAAAA,qBAAuBN,EAAUV,WAAU,GAG5CU,EAAUS,eACZT,EAAUS,cAAcX,YAAYE,MAoE3B9D,CAAAA,IAAAA,8BA3DiB,MAAA,WACtBiD,IAAAA,EAAoB,KAAKX,eAC7B,MACA,KAAKE,aAAa,6BAMbS,OAHPA,EAAkBrB,QAAQ4C,SAAW,KAAK/C,YAAYC,aAAe,EAG9DuB,IAkDIjD,CAAAA,IAAAA,oBA1CK2E,MAAAA,SAAAA,GACT,OAAA,KAAK1E,UAAU0D,cAAiCgB,mBAAAA,OAAAA,EAAvD,YAyCW3E,CAAAA,IAAAA,iBA/BE4E,MAAAA,SAAAA,EAASC,GAChBC,IAAAA,EAAOC,SAASC,cAAcJ,GAI7BE,OAFPrE,OAAOO,KAAK6D,GAAYlG,QAAQ,SAAAY,GAAQuF,OAAAA,EAAKvF,GAAOsF,EAAWtF,KAExDuF,IA0BI9E,CAAAA,IAAAA,YAvBD,MAAA,WACH,OAAA,KAAKuB,gBAAgBvC,QAsBjBgB,CAAAA,IAAAA,eAbAT,MAAAA,SAAAA,GACJ,OAAA,KAAKc,YAAY4E,UAAU1F,KAYvBS,CAAAA,IAAAA,iBAtKQ,IAAA,WACZ,OAAA,KAAKyB,YAAYW,mBAqKbpC,EAAAA,GARfA,EAAUiF,UAAYxE,OAAOyE,OAAO,CAClCC,uBAAwB,YACxBC,wBAAyB,aACzBC,uBAAwB,OACxBC,yBAA0B,SAC1BC,8BAA+B,gBAGlBvF,IAAAA,EAAAA,EAAAA,QAAAA,QAAAA;;ACrZf,aAFA,IAAA,EAAA,EAAA,QAAA,gBAEA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAAwF,OAAOxF,UAAYA,EAAnB","file":"cloneable.min.map","sourceRoot":"../src","sourcesContent":["class EventEmitter {\n  constructor() {\n    this.events = {};\n  }\n\n  on(eventName, ...callback) {\n    if (!this.eventExists(eventName)) {\n      this.events[eventName] = [];\n    }\n\n    this.events[eventName].push(...callback);\n\n    return this;\n  }\n\n  emit(eventName, context = null, ...args) {\n    if (this.eventExists(eventName)) {\n      this.events[eventName].forEach(callback =>\n        callback.call(context, ...args)\n      );\n    }\n\n    return this;\n  }\n\n  eventExists(eventName) {\n    return typeof this.events[eventName] !== \"undefined\";\n  }\n}\n\nexport default EventEmitter;\n","import EventEmitter from \"./EventEmitter\";\n\nclass StateController {\n  constructor(initialState = {}) {\n    this.eventEmitter = new EventEmitter();\n    this.initialState = initialState;\n    this.state = initialState;\n  }\n\n  on(...args) {\n    this.eventEmitter.on(...args);\n\n    return this;\n  }\n\n  setState(newState) {\n    this.eventEmitter.emit(\"beforeStateChange\");\n    this.state = { ...this.state, ...newState };\n    this.eventEmitter.emit(\"afterStateChange\");\n\n    return this;\n  }\n\n  reset() {\n    this.state = this.initialState;\n\n    return this;\n  }\n}\n\nexport default StateController;\n","class OptionController {\n  constructor(defaultData = {}) {\n    this._data = defaultData;\n  }\n\n  get(key, fallback) {\n    const data = this._dotNotationResolver(key);\n\n    return typeof data === \"undefined\" ? fallback : data;\n  }\n\n  set(key, value) {\n    this._data[key] = value;\n\n    return this;\n  }\n\n  _dotNotationResolver(dotNotationString) {\n    return dotNotationString.split(\".\").reduce((d, key) => d[key], this._data);\n  }\n}\n\nexport default OptionController;\n","import EventEmitter from \"./EventEmitter\";\nimport StateController from \"./StateController\";\nimport OptionController from \"./OptionController\";\n\n/**\n * @typedef {object} CloneableEvents\n *\n * @prop {function[]} load - Array of listeners for 'load' event.\n * @prop {function[]} beforeStateChange - Array of listeners for 'beforeStateChange' event.\n * @prop {function[]} afterStateChange - Array of listeners for 'afterStateChange' event.\n * @prop {function[]} cloneButtonClick - Array of listeners for 'cloneButtonClick' event.\n * @prop {function[]} removeButtonClick - Array of listeners for 'removeButtonClick' event.\n * @prop {function[]} uncloneable - Array of listeners for 'uncloneable' event.\n */\n/**\n * @typedef {object} CloneableOptions\n *\n * @property {number} maxCloneable - Maximum number of cloned elements allowed.\n * @property {bool} isAppend - Whether to append the cloned element or prepend it.\n * @property {HTMLElement} cloneButton - Element to be used as clone button.\n * @property {HTMLElement} removeButton - Element to be used as remove button.\n * @property {function[]} middlewares - Array of middleware functions.\n * @property {CloneableEvents} events - Object of Cloneable's event listeners.\n */\n\nclass Cloneable {\n  /**\n   * @param {HTMLElement} container Container element.\n   * @param {CloneableOptions} option Cloneable's option.\n   */\n  constructor(container, options = {}) {\n    if (typeof container === \"undefined\") {\n      throw new Error(\"Cloneable container must be defined\");\n    }\n\n    const type = container.constructor.name.slice(0, 3);\n\n    if (type !== \"SVG\" && type !== \"HTM\") {\n      throw new TypeError(\n        \"Cloneable container must be a direct or inherited instance of HTMLElement or SVGElement class\"\n      );\n    }\n\n    if (options === null || options.constructor !== Object) {\n      const receivedType = options === null ? \"null\" : typeof options;\n\n      throw new TypeError(\n        \"Options parameter must be object, \" + receivedType + \" given.\"\n      );\n    }\n\n    this.container = container;\n    this._iniOptionController(options);\n    this._initStateController();\n    this.eventEmitter = new EventEmitter();\n    this.middlewares = this.optionController.get(\"middlewares\");\n\n    // Init event listeners\n    const events = this.optionController.get(\"events\");\n\n    Object.keys(events).forEach(eventName =>\n      this.on(eventName, ...events[eventName])\n    );\n  }\n\n  /**\n   * Middleware function to manipulate the cloned element before add to document.\n   *\n   * @public\n   * @param {...function} callback Callback function.\n   * @return {Cloneable} This\n   */\n  middleware(...callback) {\n    this.middlewares.push(...callback);\n\n    return this;\n  }\n\n  /**\n   * @see EventEmitter.on()\n   * @return {Cloneable}\n   */\n  on(...args) {\n    this.eventEmitter.on(...args);\n\n    return this;\n  }\n\n  /**\n   * Initialize DOM\n   */\n  init() {\n    this.cloneButton = this._getCloneButton();\n    this._handleCustomRemoveButton();\n    this._initControllersElement();\n    this._initTrayElement();\n    this._initContainerElement();\n\n    // Enable/disable clone button on clonedAmount change.\n    this.stateController.on(\"afterStateChange\", () => {\n      this.eventEmitter.emit(\"afterStateChange\", this);\n\n      this.cloneButton.disabled =\n        this._getState().clonedAmount === this._getState().maxCloneable;\n    });\n    this.stateController.on(\"beforeStateChange\", () => {\n      this.eventEmitter.emit(\"beforeStateChange\", this);\n    });\n\n    this.eventEmitter.emit(\"load\", this);\n\n    return this;\n  }\n\n  /**\n   * Check if the element still cloneable\n   *\n   * @return {bool}\n   */\n  isCloneable() {\n    return this._getState().clonedAmount < this._getState().maxCloneable;\n  }\n\n  _iniOptionController(options) {\n    const { max, append } = this.container.dataset;\n    // Default options\n    this.optionController = new OptionController({\n      maxCloneable: parseInt(max) || Infinity,\n      isAppend: append !== \"false\",\n      cloneButton: null,\n      removeButton: null,\n      middlewares: [],\n      events: {},\n      ...options\n    });\n  }\n\n  _initStateController() {\n    const maxCloneable = this.optionController.get(\"maxCloneable\");\n\n    this.stateController = new StateController({\n      maxCloneable,\n      cloneableAmount: maxCloneable,\n      clonedAmount: 0,\n      clonedElements: [],\n      isAppend: this.optionController.get(\"isAppend\")\n    });\n  }\n\n  /**\n   * Initialize Cloneable's .controllers element\n   */\n  _initControllersElement() {\n    this.controllers = this._createElement(\"div\", {\n      className: this._getConstant(\"CONTROLLERS_ELEMENT_CLASSNAME\")\n    });\n    this.controllers.appendChild(this.cloneButton);\n  }\n\n  /**\n   * Initialize Cloneable's .tray element\n   */\n  _initTrayElement() {\n    const tray = this._createElement(\"div\", {\n      className: this._getConstant(\"TRAY_ELEMENT_CLASSNAME\")\n    });\n\n    tray.style.marginBottom = \"1em\";\n\n    this.tray = tray;\n  }\n\n  /**\n   * Initialize Cloneable's container element.\n   */\n  _initContainerElement() {\n    this.container.style.padding = \"1em\";\n    this.target = this.container.firstElementChild;\n\n    // Add to document\n    this.tray.appendChild(this.target);\n    this.container.appendChild(this.tray);\n    this.container.appendChild(this.controllers);\n  }\n\n  /**\n   * Listener for cloneButton\n   */\n  clone() {\n    if (!this.isCloneable()) {\n      this.eventEmitter.emit(\"uncloneable\", this);\n\n      return;\n    }\n\n    this.eventEmitter.emit(\"beforeClone\", this);\n\n    const clonedElemWrapper = this._createClonedElementWrapper();\n    const cloned = this.target.cloneNode(true);\n    const removeButton = this._getRemoveButton();\n    const insertMethod = this._getState().isAppend\n      ? \"appendChild\"\n      : \"insertBefore\";\n\n    // Append cloned element before apply middleware\n    // so the middleware can access clonedElemWrapper via clonedElem.parentElement\n    clonedElemWrapper.appendChild(cloned);\n    clonedElemWrapper.appendChild(removeButton);\n    // Could not use Node.insertAdjacentElement.\n    // Not-a-function error is thrown.\n    this.tray[insertMethod](clonedElemWrapper, this.tray.firstElementChild);\n\n    const alteredCloned = this._applyMiddlewares(cloned);\n    const { clonedAmount, cloneableAmount, clonedElements } = this._getState();\n\n    this.stateController.setState({\n      clonedAmount: clonedAmount + 1,\n      cloneableAmount: cloneableAmount - 1,\n      clonedElements: [...clonedElements, alteredCloned]\n    });\n\n    this.eventEmitter.emit(\"afterClone\", this);\n\n    return this;\n  }\n\n  /**\n   * Listener for removeButton\n   */\n  removeClonedElement(id) {\n    const target = this.tray.querySelector(`[data-cloned-id=\"${id}\"]`);\n\n    this.tray.removeChild(target);\n\n    this.stateController.setState({\n      clonedAmount: this._getState().clonedAmount - 1,\n      cloneableAmount: this._getState().cloneableAmount + 1,\n      clonedElements: [...this.tray.querySelectorAll(\"[data-cloned-id]\")]\n    });\n  }\n\n  get clonedElements() {\n    return this._getState().clonedElements;\n  }\n\n  /**\n   * Get clone button.\n   * If no custom button found, create a new one.\n   *\n   * @return {HTMLButtonElement} Button.\n   */\n  _getCloneButton() {\n    const customBtn =\n      this.optionController.get(\"cloneButton\") ||\n      this._findCustomButton(\"clone\");\n    const btn = customBtn\n      ? customBtn\n      : this._createElement(\"button\", {\n          className: this._getConstant(\"CLONE_BUTTON_CLASSNAME\"),\n          textContent: \"Clone\"\n        });\n\n    btn.addEventListener(\"click\", () => {\n      this.eventEmitter.emit(\"cloneButtonClick\", this);\n      this.clone();\n    });\n\n    return btn;\n  }\n\n  /**\n   * Get remove button.\n   * If no custom button found, create a new one.\n   *\n   * @return {HTMLButtonElement} Button.\n   */\n  _getRemoveButton() {\n    const btn = this.removeButtonTemplate\n      ? this.removeButtonTemplate.cloneNode(true)\n      : this._createElement(\"button\", {\n          className: this._getConstant(\"REMOVE_BUTTON_CLASSNAME\"),\n          textContent: \"Remove\"\n        });\n\n    // btn.style.position = \"absolute\";\n    // btn.style.top = \"5px\";\n    // btn.style.right = \"5px\";\n\n    btn.addEventListener(\"click\", e => {\n      this.eventEmitter.emit(\"removeButtonClick\", this);\n      this.removeClonedElement(e.target.parentElement.dataset.clonedId);\n    });\n\n    return btn;\n  }\n\n  /**\n   * Apply all registered middlewares to cloned element.\n   *\n   * @param {HTMLElement} cloned Cloned element.\n   * @return {HTMLElement} Modified cloned element.\n   */\n  _applyMiddlewares(cloned) {\n    const { constructor } = cloned;\n\n    return this.middlewares.reduce((cln, mdlw) => {\n      const alteredCloned = mdlw.call(\n        this,\n        cln,\n        this._getState().clonedAmount + 1\n      );\n\n      if (\n        typeof alteredCloned === \"undefined\" ||\n        alteredCloned.constructor !== constructor\n      ) {\n        throw new TypeError(\"Middleware must return the cloned element\");\n      }\n\n      return alteredCloned;\n    }, cloned);\n  }\n\n  /**\n   * Clone and remove custome remove button element.\n   */\n  _handleCustomRemoveButton() {\n    const customBtn =\n      this.optionController.get(\"removeButton\") ||\n      this._findCustomButton(\"remove\");\n\n    if (!customBtn) {\n      return;\n    }\n\n    this.removeButtonTemplate = customBtn.cloneNode(true);\n\n    // If it has parent, remove it.\n    if (customBtn.parentElement) {\n      customBtn.parentElement.removeChild(customBtn);\n    }\n  }\n\n  /**\n   * Create element to hold cloned element.\n   *\n   * @return {HTMLDivElement} ClonedElementWrapper.\n   */\n  _createClonedElementWrapper() {\n    const clonedElemWrapper = this._createElement(\n      \"div\",\n      this._getConstant(\"CLONED_ELEMENT_CLASSNAME\")\n    );\n\n    clonedElemWrapper.dataset.clonedId = this._getState().clonedAmount + 1;\n    // clonedElemWrapper.style.position = \"relative\";\n\n    return clonedElemWrapper;\n  }\n\n  /**\n   * Find custom clone/remove button.\n   *\n   * @return {HTMLElement|null} Found element or null.\n   */\n  _findCustomButton(buttonType) {\n    return this.container.querySelector(`[data-cloneable-${buttonType}-btn]`);\n  }\n\n  /**\n   * A decorator function for document.createElement()\n   *\n   * @param {string} tagName Element's tag name\n   * @param {object} attributes Object of the element's attributes\n   * @return {HTMLElement} Created HTMLElement.\n   */\n  _createElement(tagName, attributes) {\n    const elem = document.createElement(tagName);\n\n    Object.keys(attributes).forEach(key => (elem[key] = attributes[key]));\n\n    return elem;\n  }\n\n  _getState() {\n    return this.stateController.state;\n  }\n\n  /**\n   * Get Cloneable class' constants\n   *\n   * @param {string} key Constant key.\n   * @return {string} Constant value.\n   */\n  _getConstant(key) {\n    return this.constructor.constants[key];\n  }\n}\n\nCloneable.constants = Object.freeze({\n  CLONE_BUTTON_CLASSNAME: \"clone-btn\",\n  REMOVE_BUTTON_CLASSNAME: \"remove-btn\",\n  TRAY_ELEMENT_CLASSNAME: \"tray\",\n  CLONED_ELEMENT_CLASSNAME: \"cloned\",\n  CONTROLLERS_ELEMENT_CLASSNAME: \"controllers\"\n});\n\nexport default Cloneable;\n","import Cloneable from \"./Cloneable\";\r\n\r\nwindow.Cloneable = Cloneable;\r\n"]}