{"version":3,"sources":["EventEmitter.js","StateController.js","OptionController.js","Cloneable.js","build.js"],"names":["EventEmitter","events","eventName","eventExists","callback","push","context","args","forEach","call","StateController","initialState","eventEmitter","state","on","newState","emit","OptionController","defaultData","_data","key","fallback","data","_dotNotationResolver","value","dotNotationString","split","reduce","d","Cloneable","container","options","Error","type","constructor","name","slice","TypeError","Object","receivedType","_iniOptionController","_initStateController","middlewares","optionController","get","keys","cloneButton","_getCloneButton","_handleCustomRemoveButton","_initControllersElement","_initTrayElement","_initContainerElement","stateController","disabled","_getState","clonedAmount","maxCloneable","dataset","max","append","parseInt","Infinity","isAppend","removeButton","cloneableAmount","clonedElements","controllers","_createElement","className","_getConstant","appendChild","tray","style","marginBottom","target","firstElementChild","isCloneable","clonedElemWrapper","_createClonedElementWrapper","cloned","cloneNode","_getRemoveButton","insertMethod","alteredCloned","_applyMiddlewares","setState","id","querySelector","removeChild","querySelectorAll","customBtn","_findCustomButton","btn","textContent","addEventListener","clone","removeButtonTemplate","e","removeClonedElement","parentElement","clonedId","cln","mdlw","buttonType","tagName","attributes","elem","document","createElement","constants","freeze","CLONE_BUTTON_CLASSNAME","REMOVE_BUTTON_CLASSNAME","TRAY_ELEMENT_CLASSNAME","CLONED_ELEMENT_CLASSNAME","CONTROLLERS_ELEMENT_CLASSNAME","window"],"mappings":"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","file":"cloneable.map","sourceRoot":"../src","sourcesContent":["class EventEmitter {\n  constructor() {\n    this.events = {};\n  }\n\n  on(eventName, ...callback) {\n    if (!this.eventExists(eventName)) {\n      this.events[eventName] = [];\n    }\n\n    this.events[eventName].push(...callback);\n\n    return this;\n  }\n\n  emit(eventName, context = null, ...args) {\n    if (this.eventExists(eventName)) {\n      this.events[eventName].forEach(callback =>\n        callback.call(context, ...args)\n      );\n    }\n\n    return this;\n  }\n\n  eventExists(eventName) {\n    return typeof this.events[eventName] !== \"undefined\";\n  }\n}\n\nexport default EventEmitter;\n","import EventEmitter from \"./EventEmitter\";\n\nclass StateController {\n  constructor(initialState = {}) {\n    this.eventEmitter = new EventEmitter();\n    this.initialState = initialState;\n    this.state = initialState;\n  }\n\n  on(...args) {\n    this.eventEmitter.on(...args);\n\n    return this;\n  }\n\n  setState(newState) {\n    this.eventEmitter.emit(\"beforeStateChange\");\n    this.state = { ...this.state, ...newState };\n    this.eventEmitter.emit(\"afterStateChange\");\n\n    return this;\n  }\n\n  reset() {\n    this.state = this.initialState;\n\n    return this;\n  }\n}\n\nexport default StateController;\n","class OptionController {\n  constructor(defaultData = {}) {\n    this._data = defaultData;\n  }\n\n  get(key, fallback) {\n    const data = this._dotNotationResolver(key);\n\n    return typeof data === \"undefined\" ? fallback : data;\n  }\n\n  set(key, value) {\n    this._data[key] = value;\n\n    return this;\n  }\n\n  _dotNotationResolver(dotNotationString) {\n    return dotNotationString.split(\".\").reduce((d, key) => d[key], this._data);\n  }\n}\n\nexport default OptionController;\n","import EventEmitter from \"./EventEmitter\";\nimport StateController from \"./StateController\";\nimport OptionController from \"./OptionController\";\n\n/**\n * @typedef {object} CloneableEvents\n *\n * @prop {function[]} load - Array of listeners for 'load' event.\n * @prop {function[]} beforeStateChange - Array of listeners for 'beforeStateChange' event.\n * @prop {function[]} afterStateChange - Array of listeners for 'afterStateChange' event.\n * @prop {function[]} cloneButtonClick - Array of listeners for 'cloneButtonClick' event.\n * @prop {function[]} removeButtonClick - Array of listeners for 'removeButtonClick' event.\n * @prop {function[]} uncloneable - Array of listeners for 'uncloneable' event.\n */\n/**\n * @typedef {object} CloneableOptions\n *\n * @property {number} maxCloneable - Maximum number of cloned elements allowed.\n * @property {bool} isAppend - Whether to append the cloned element or prepend it.\n * @property {HTMLElement} cloneButton - Element to be used as clone button.\n * @property {HTMLElement} removeButton - Element to be used as remove button.\n * @property {function[]} middlewares - Array of middleware functions.\n * @property {CloneableEvents} events - Object of Cloneable's event listeners.\n */\n\nclass Cloneable {\n  /**\n   * @param {HTMLElement} container Container element.\n   * @param {CloneableOptions} option Cloneable's option.\n   */\n  constructor(container, options = {}) {\n    if (typeof container === \"undefined\") {\n      throw new Error(\"Cloneable container must be defined\");\n    }\n\n    if (container === null) {\n      throw new Error(\"Cloneable container must not be null\");\n    }\n\n    const type = container.constructor.name.slice(0, 3);\n\n    if (type !== \"SVG\" && type !== \"HTM\") {\n      throw new TypeError(\n        \"Cloneable container must be a direct or inherited instance of HTMLElement or SVGElement class\"\n      );\n    }\n\n    if (options === null || options.constructor !== Object) {\n      const receivedType = options === null ? \"null\" : typeof options;\n\n      throw new TypeError(\n        \"Options parameter must be object, \" + receivedType + \" given.\"\n      );\n    }\n\n    this.container = container;\n    this._iniOptionController(options);\n    this._initStateController();\n    this.eventEmitter = new EventEmitter();\n    this.middlewares = this.optionController.get(\"middlewares\");\n\n    // Init event listeners\n    const events = this.optionController.get(\"events\");\n\n    Object.keys(events).forEach(eventName =>\n      this.on(eventName, ...events[eventName])\n    );\n  }\n\n  /**\n   * Middleware function to manipulate the cloned element before add to document.\n   *\n   * @public\n   * @param {...function} callback Callback function.\n   * @return {Cloneable} This\n   */\n  middleware(...callback) {\n    this.middlewares.push(...callback);\n\n    return this;\n  }\n\n  /**\n   * @see EventEmitter.on()\n   * @return {Cloneable}\n   */\n  on(...args) {\n    this.eventEmitter.on(...args);\n\n    return this;\n  }\n\n  /**\n   * Initialize DOM\n   */\n  init() {\n    this.cloneButton = this._getCloneButton();\n    this._handleCustomRemoveButton();\n    this._initControllersElement();\n    this._initTrayElement();\n    this._initContainerElement();\n\n    // Enable/disable clone button on clonedAmount change.\n    this.stateController.on(\"afterStateChange\", () => {\n      this.eventEmitter.emit(\"afterStateChange\", this);\n\n      this.cloneButton.disabled =\n        this._getState().clonedAmount === this._getState().maxCloneable;\n    });\n    this.stateController.on(\"beforeStateChange\", () => {\n      this.eventEmitter.emit(\"beforeStateChange\", this);\n    });\n\n    this.eventEmitter.emit(\"load\", this);\n\n    return this;\n  }\n\n  /**\n   * Check if the element still cloneable\n   *\n   * @return {bool}\n   */\n  isCloneable() {\n    return this._getState().clonedAmount < this._getState().maxCloneable;\n  }\n\n  _iniOptionController(options) {\n    const { max, append } = this.container.dataset;\n    // Default options\n    this.optionController = new OptionController({\n      maxCloneable: parseInt(max) || Infinity,\n      isAppend: append !== \"false\",\n      cloneButton: null,\n      removeButton: null,\n      middlewares: [],\n      events: {},\n      ...options\n    });\n  }\n\n  _initStateController() {\n    const maxCloneable = this.optionController.get(\"maxCloneable\");\n\n    this.stateController = new StateController({\n      maxCloneable,\n      cloneableAmount: maxCloneable,\n      clonedAmount: 0,\n      clonedElements: [],\n      isAppend: this.optionController.get(\"isAppend\")\n    });\n  }\n\n  /**\n   * Initialize Cloneable's .controllers element\n   */\n  _initControllersElement() {\n    this.controllers = this._createElement(\"div\", {\n      className: this._getConstant(\"CONTROLLERS_ELEMENT_CLASSNAME\")\n    });\n    this.controllers.appendChild(this.cloneButton);\n  }\n\n  /**\n   * Initialize Cloneable's .tray element\n   */\n  _initTrayElement() {\n    const tray = this._createElement(\"div\", {\n      className: this._getConstant(\"TRAY_ELEMENT_CLASSNAME\")\n    });\n\n    tray.style.marginBottom = \"1em\";\n\n    this.tray = tray;\n  }\n\n  /**\n   * Initialize Cloneable's container element.\n   */\n  _initContainerElement() {\n    // this.container.style.padding = \"1em\";\n    this.target = this.container.firstElementChild;\n\n    // Add to document\n    this.tray.appendChild(this.target);\n    this.container.appendChild(this.tray);\n    this.container.appendChild(this.controllers);\n  }\n\n  /**\n   * Listener for cloneButton\n   */\n  clone() {\n    if (!this.isCloneable()) {\n      this.eventEmitter.emit(\"uncloneable\", this);\n\n      return;\n    }\n\n    this.eventEmitter.emit(\"beforeClone\", this);\n\n    const clonedElemWrapper = this._createClonedElementWrapper();\n    const cloned = this.target.cloneNode(true);\n    const removeButton = this._getRemoveButton();\n    const insertMethod = this._getState().isAppend\n      ? \"appendChild\"\n      : \"insertBefore\";\n\n    // Append cloned element before apply middleware\n    // so the middleware can access clonedElemWrapper via clonedElem.parentElement\n    clonedElemWrapper.appendChild(cloned);\n    clonedElemWrapper.appendChild(removeButton);\n    // Could not use Node.insertAdjacentElement.\n    // Not-a-function error is thrown.\n    this.tray[insertMethod](clonedElemWrapper, this.tray.firstElementChild);\n\n    const alteredCloned = this._applyMiddlewares(cloned);\n    const { clonedAmount, cloneableAmount, clonedElements } = this._getState();\n\n    this.stateController.setState({\n      clonedAmount: clonedAmount + 1,\n      cloneableAmount: cloneableAmount - 1,\n      clonedElements: [...clonedElements, alteredCloned]\n    });\n\n    this.eventEmitter.emit(\"afterClone\", this);\n\n    return this;\n  }\n\n  /**\n   * Listener for removeButton\n   */\n  removeClonedElement(id) {\n    const target = this.tray.querySelector(`[data-cloned-id=\"${id}\"]`);\n\n    this.tray.removeChild(target);\n\n    this.stateController.setState({\n      clonedAmount: this._getState().clonedAmount - 1,\n      cloneableAmount: this._getState().cloneableAmount + 1,\n      clonedElements: [...this.tray.querySelectorAll(\"[data-cloned-id]\")]\n    });\n  }\n\n  get clonedElements() {\n    return this._getState().clonedElements;\n  }\n\n  /**\n   * Get clone button.\n   * If no custom button found, create a new one.\n   *\n   * @return {HTMLButtonElement} Button.\n   */\n  _getCloneButton() {\n    const customBtn =\n      this.optionController.get(\"cloneButton\") ||\n      this._findCustomButton(\"clone\");\n    const btn = customBtn\n      ? customBtn\n      : this._createElement(\"button\", {\n          className: this._getConstant(\"CLONE_BUTTON_CLASSNAME\"),\n          textContent: \"Clone\"\n        });\n\n    btn.addEventListener(\"click\", () => {\n      this.eventEmitter.emit(\"cloneButtonClick\", this);\n      this.clone();\n    });\n\n    return btn;\n  }\n\n  /**\n   * Get remove button.\n   * If no custom button found, create a new one.\n   *\n   * @return {HTMLButtonElement} Button.\n   */\n  _getRemoveButton() {\n    const btn = this.removeButtonTemplate\n      ? this.removeButtonTemplate.cloneNode(true)\n      : this._createElement(\"button\", {\n          className: this._getConstant(\"REMOVE_BUTTON_CLASSNAME\"),\n          textContent: \"Remove\"\n        });\n\n    // btn.style.position = \"absolute\";\n    // btn.style.top = \"5px\";\n    // btn.style.right = \"5px\";\n\n    btn.addEventListener(\"click\", e => {\n      this.eventEmitter.emit(\"removeButtonClick\", this);\n      this.removeClonedElement(e.target.parentElement.dataset.clonedId);\n    });\n\n    return btn;\n  }\n\n  /**\n   * Apply all registered middlewares to cloned element.\n   *\n   * @param {HTMLElement} cloned Cloned element.\n   * @return {HTMLElement} Modified cloned element.\n   */\n  _applyMiddlewares(cloned) {\n    const { constructor } = cloned;\n\n    return this.middlewares.reduce((cln, mdlw) => {\n      const alteredCloned = mdlw.call(\n        this,\n        cln,\n        this._getState().clonedAmount + 1\n      );\n\n      if (\n        typeof alteredCloned === \"undefined\" ||\n        alteredCloned.constructor !== constructor\n      ) {\n        throw new TypeError(\"Middleware must return the cloned element\");\n      }\n\n      return alteredCloned;\n    }, cloned);\n  }\n\n  /**\n   * Clone and remove custome remove button element.\n   */\n  _handleCustomRemoveButton() {\n    const customBtn =\n      this.optionController.get(\"removeButton\") ||\n      this._findCustomButton(\"remove\");\n\n    if (!customBtn) {\n      return;\n    }\n\n    this.removeButtonTemplate = customBtn.cloneNode(true);\n\n    // If it has parent, remove it.\n    if (customBtn.parentElement) {\n      customBtn.parentElement.removeChild(customBtn);\n    }\n  }\n\n  /**\n   * Create element to hold cloned element.\n   *\n   * @return {HTMLDivElement} ClonedElementWrapper.\n   */\n  _createClonedElementWrapper() {\n    const clonedElemWrapper = this._createElement(\n      \"div\",\n      this._getConstant(\"CLONED_ELEMENT_CLASSNAME\")\n    );\n\n    clonedElemWrapper.dataset.clonedId = this._getState().clonedAmount + 1;\n    // clonedElemWrapper.style.position = \"relative\";\n\n    return clonedElemWrapper;\n  }\n\n  /**\n   * Find custom clone/remove button.\n   *\n   * @return {HTMLElement|null} Found element or null.\n   */\n  _findCustomButton(buttonType) {\n    return this.container.querySelector(`[data-cloneable-${buttonType}-btn]`);\n  }\n\n  /**\n   * A decorator function for document.createElement()\n   *\n   * @param {string} tagName Element's tag name\n   * @param {object} attributes Object of the element's attributes\n   * @return {HTMLElement} Created HTMLElement.\n   */\n  _createElement(tagName, attributes) {\n    const elem = document.createElement(tagName);\n\n    Object.keys(attributes).forEach(key => (elem[key] = attributes[key]));\n\n    return elem;\n  }\n\n  _getState() {\n    return this.stateController.state;\n  }\n\n  /**\n   * Get Cloneable class' constants\n   *\n   * @param {string} key Constant key.\n   * @return {string} Constant value.\n   */\n  _getConstant(key) {\n    return this.constructor.constants[key];\n  }\n}\n\nCloneable.constants = Object.freeze({\n  CLONE_BUTTON_CLASSNAME: \"clone-btn\",\n  REMOVE_BUTTON_CLASSNAME: \"remove-btn\",\n  TRAY_ELEMENT_CLASSNAME: \"tray\",\n  CLONED_ELEMENT_CLASSNAME: \"cloned\",\n  CONTROLLERS_ELEMENT_CLASSNAME: \"controllers\"\n});\n\nexport default Cloneable;\n","import Cloneable from \"./Cloneable\";\r\n\r\nwindow.Cloneable = Cloneable;\r\n"]}